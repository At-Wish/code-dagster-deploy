
services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage. Depending on the hardware you run this Compose on, you may be able
  # to reduce the interval and timeout in the healthcheck to speed up your `docker-compose up` times.
  docker_example_postgresql:
    image: postgres:18
    container_name: docker_example_postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - ${DOCKER_NETWORK_NAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 8s
      retries: 5

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  docker_example_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    entrypoint:
      - dagster-webserver
      - -h
      - ${DOCKER_WEBSERVER_HOST}
      - -p
      - ${DOCKER_WEBSERVER_PORT}
      - -w
      - /opt/dagster/workspace.yaml
    container_name: docker_example_webserver
    expose:
      - ${DOCKER_WEBSERVER_PORT}
    ports:
      - ${DOCKER_WEBSERVER_PORT}:${DOCKER_WEBSERVER_PORT}
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_POSTGRES_HOST: ${DAGSTER_POSTGRES_HOST}
      DAGSTER_POSTGRES_PORT: ${DAGSTER_POSTGRES_PORT}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - ${IO_MANAGER_STORAGE_PATH}:${IO_MANAGER_STORAGE_PATH}
    networks:
      - ${DOCKER_NETWORK_NAME}
    depends_on:
      docker_example_postgresql:
        condition: service_healthy

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  docker_example_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
      DAGSTER_POSTGRES_HOST: ${DAGSTER_POSTGRES_HOST}
      DAGSTER_POSTGRES_PORT: ${DAGSTER_POSTGRES_PORT}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - ${IO_MANAGER_STORAGE_PATH}:${IO_MANAGER_STORAGE_PATH}
    networks:
      - ${DOCKER_NETWORK_NAME}
    depends_on:
      docker_example_postgresql:
        condition: service_healthy

networks:
  docker_example_network:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME}